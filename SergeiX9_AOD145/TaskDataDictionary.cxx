//
// File generated by rootcint at Mon Dec 15 16:29:07 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME TaskDataDictionary
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TaskDataDictionary.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void Event_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Event(void *p = 0);
   static void *newArray_Event(Long_t size, void *p);
   static void delete_Event(void *p);
   static void deleteArray_Event(void *p);
   static void destruct_Event(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Event*)
   {
      ::Event *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Event >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Event", ::Event::Class_Version(), "./TaskData.h", 11,
                  typeid(::Event), DefineBehavior(ptr, ptr),
                  &::Event::Dictionary, isa_proxy, 4,
                  sizeof(::Event) );
      instance.SetNew(&new_Event);
      instance.SetNewArray(&newArray_Event);
      instance.SetDelete(&delete_Event);
      instance.SetDeleteArray(&deleteArray_Event);
      instance.SetDestructor(&destruct_Event);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Event*)
   {
      return GenerateInitInstanceLocal((::Event*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Event*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Track_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Track(void *p = 0);
   static void *newArray_Track(Long_t size, void *p);
   static void delete_Track(void *p);
   static void deleteArray_Track(void *p);
   static void destruct_Track(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Track*)
   {
      ::Track *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Track >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Track", ::Track::Class_Version(), "./TaskData.h", 46,
                  typeid(::Track), DefineBehavior(ptr, ptr),
                  &::Track::Dictionary, isa_proxy, 4,
                  sizeof(::Track) );
      instance.SetNew(&new_Track);
      instance.SetNewArray(&newArray_Track);
      instance.SetDelete(&delete_Track);
      instance.SetDeleteArray(&deleteArray_Track);
      instance.SetDestructor(&destruct_Track);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Track*)
   {
      return GenerateInitInstanceLocal((::Track*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Track*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *Event::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Event::Class_Name()
{
   return "Event";
}

//______________________________________________________________________________
const char *Event::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Event::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Event::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Event::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Track::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Track::Class_Name()
{
   return "Track";
}

//______________________________________________________________________________
const char *Track::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Track::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Track::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Track::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void Event::Streamer(TBuffer &R__b)
{
   // Stream an object of class Event.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Event::Class(),this);
   } else {
      R__b.WriteClassBuffer(Event::Class(),this);
   }
}

//______________________________________________________________________________
void Event::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Event.
      TClass *R__cl = ::Event::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offlinetrigger", &offlinetrigger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "onlinetrigger", &onlinetrigger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isCentral", &isCentral);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isSemiCentral", &isSemiCentral);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isMB", &isMB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "centV0M", &centV0M);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "centTRK", &centTRK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zvtx", &zvtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "runn", &runn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mag", &mag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vzem", &vzem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zdcm", &zdcm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntrk_gbl", &ntrk_gbl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntrk_hyb", &ntrk_hyb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntrk_tpc", &ntrk_tpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "towerZNA[5]", towerZNA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "towerZNC[5]", towerZNC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "towerZPA[5]", towerZPA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "towerZPC[5]", towerZPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "multV0[64]", multV0);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Event(void *p) {
      return  p ? new(p) ::Event : new ::Event;
   }
   static void *newArray_Event(Long_t nElements, void *p) {
      return p ? new(p) ::Event[nElements] : new ::Event[nElements];
   }
   // Wrapper around operator delete
   static void delete_Event(void *p) {
      delete ((::Event*)p);
   }
   static void deleteArray_Event(void *p) {
      delete [] ((::Event*)p);
   }
   static void destruct_Event(void *p) {
      typedef ::Event current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Event

//______________________________________________________________________________
void Track::Streamer(TBuffer &R__b)
{
   // Stream an object of class Track.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Track::Class(),this);
   } else {
      R__b.WriteClassBuffer(Track::Class(),this);
   }
}

//______________________________________________________________________________
void Track::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Track.
      TClass *R__cl = ::Track::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filter", &filter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gid", &gid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tpcmom", &tpcmom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p", &p);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncls", &ncls);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nclsS", &nclsS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nclsF", &nclsF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncross", &ncross);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2pc", &chi2pc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dcaxy", &dcaxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dcaz", &dcaz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedx", &dedx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ttof", &ttof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "length", &length);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nspiTPC", &nspiTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nskTPC", &nskTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nspTPC", &nspTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nseTPC", &nseTPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nspiTOF", &nspiTOF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nskTOF", &nskTOF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nspTOF", &nspTOF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nseTOF", &nseTOF);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Track(void *p) {
      return  p ? new(p) ::Track : new ::Track;
   }
   static void *newArray_Track(Long_t nElements, void *p) {
      return p ? new(p) ::Track[nElements] : new ::Track[nElements];
   }
   // Wrapper around operator delete
   static void delete_Track(void *p) {
      delete ((::Track*)p);
   }
   static void deleteArray_Track(void *p) {
      delete [] ((::Track*)p);
   }
   static void destruct_Track(void *p) {
      typedef ::Track current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Track

/********************************************************
* TaskDataDictionary.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTaskDataDictionary();

extern "C" void G__set_cpp_environmentTaskDataDictionary() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TaskData.h");
  G__cpp_reset_tagtableTaskDataDictionary();
}
#include <new>
extern "C" int G__cpp_dllrevTaskDataDictionary() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Event */
static int G__TaskDataDictionary_169_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Event* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Event[n];
     } else {
       p = new((void*) gvp) Event[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Event;
     } else {
       p = new((void*) gvp) Event;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaskDataDictionaryLN_Event));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaskDataDictionary_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Event::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaskDataDictionary_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Event::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaskDataDictionary_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Event::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaskDataDictionary_169_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Event::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaskDataDictionary_169_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaskDataDictionary_169_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Event::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaskDataDictionary_169_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Event::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaskDataDictionary_169_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Event::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaskDataDictionary_169_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Event::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TaskDataDictionary_169_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Event* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Event(*(Event*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaskDataDictionaryLN_Event));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Event G__TEvent;
static int G__TaskDataDictionary_169_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Event*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Event*) (soff+(sizeof(Event)*i)))->~G__TEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Event*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Event*) (soff))->~G__TEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TaskDataDictionary_169_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Event* dest = (Event*) G__getstructoffset();
   *dest = *(Event*) libp->para[0].ref;
   const Event& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Track */
static int G__TaskDataDictionary_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Track[n];
     } else {
       p = new((void*) gvp) Track[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Track;
     } else {
       p = new((void*) gvp) Track;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaskDataDictionaryLN_Track));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaskDataDictionary_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Track::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaskDataDictionary_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Track::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaskDataDictionary_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Track::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaskDataDictionary_170_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Track::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaskDataDictionary_170_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Track*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaskDataDictionary_170_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Track::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaskDataDictionary_170_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Track::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaskDataDictionary_170_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Track::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaskDataDictionary_170_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Track::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TaskDataDictionary_170_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Track* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Track(*(Track*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaskDataDictionaryLN_Track));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Track G__TTrack;
static int G__TaskDataDictionary_170_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Track*) (soff+(sizeof(Track)*i)))->~G__TTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Track*) (soff))->~G__TTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TaskDataDictionary_170_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Track* dest = (Track*) G__getstructoffset();
   *dest = *(Track*) libp->para[0].ref;
   const Track& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Event */

/* Track */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTaskDataDictionary {
 public:
  G__Sizep2memfuncTaskDataDictionary(): p(&G__Sizep2memfuncTaskDataDictionary::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTaskDataDictionary::*p)();
};

size_t G__get_sizep2memfuncTaskDataDictionary()
{
  G__Sizep2memfuncTaskDataDictionary a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTaskDataDictionary() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TaskDataDictionaryLN_Event))) {
     Event *G__Lderived;
     G__Lderived=(Event*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaskDataDictionaryLN_Event),G__get_linked_tagnum(&G__TaskDataDictionaryLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TaskDataDictionaryLN_Track))) {
     Track *G__Lderived;
     G__Lderived=(Track*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaskDataDictionaryLN_Track),G__get_linked_tagnum(&G__TaskDataDictionaryLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTaskDataDictionary() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TaskDataDictionaryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaskDataDictionaryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaskDataDictionaryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaskDataDictionaryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaskDataDictionaryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__TaskDataDictionaryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaskDataDictionaryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaskDataDictionaryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaskDataDictionaryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaskDataDictionaryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Event */
static void G__setup_memvarEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaskDataDictionaryLN_Event));
   { Event *p; p=(Event*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->offlinetrigger)-(long)(p)),109,0,0,-1,G__defined_typename("ULong64_t"),-1,1,"offlinetrigger=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->onlinetrigger)-(long)(p)),109,0,0,-1,G__defined_typename("ULong64_t"),-1,1,"onlinetrigger=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isCentral)-(long)(p)),103,0,0,-1,-1,-1,1,"isCentral=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isSemiCentral)-(long)(p)),103,0,0,-1,-1,-1,1,"isSemiCentral=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isMB)-(long)(p)),103,0,0,-1,-1,-1,1,"isMB=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->centV0M)-(long)(p)),102,0,0,-1,-1,-1,1,"centV0M=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->centTRK)-(long)(p)),102,0,0,-1,-1,-1,1,"centTRK=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zvtx)-(long)(p)),102,0,0,-1,-1,-1,1,"zvtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->runn)-(long)(p)),105,0,0,-1,-1,-1,1,"runn=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mag)-(long)(p)),102,0,0,-1,-1,-1,1,"mag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vzem)-(long)(p)),105,0,0,-1,-1,-1,1,"vzem=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zdcm)-(long)(p)),105,0,0,-1,-1,-1,1,"zdcm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntrk_gbl)-(long)(p)),105,0,0,-1,-1,-1,1,"ntrk_gbl=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntrk_hyb)-(long)(p)),105,0,0,-1,-1,-1,1,"ntrk_hyb=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntrk_tpc)-(long)(p)),105,0,0,-1,-1,-1,1,"ntrk_tpc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->towerZNA)-(long)(p)),102,0,0,-1,-1,-1,1,"towerZNA[5]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->towerZNC)-(long)(p)),102,0,0,-1,-1,-1,1,"towerZNC[5]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->towerZPA)-(long)(p)),102,0,0,-1,-1,-1,1,"towerZPA[5]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->towerZPC)-(long)(p)),102,0,0,-1,-1,-1,1,"towerZPC[5]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->multV0)-(long)(p)),102,0,0,-1,-1,-1,1,"multV0[64]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaskDataDictionaryLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Track */
static void G__setup_memvarTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaskDataDictionaryLN_Track));
   { Track *p; p=(Track*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->filter)-(long)(p)),105,0,0,-1,-1,-1,1,"filter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gid)-(long)(p)),105,0,0,-1,-1,-1,1,"gid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),105,0,0,-1,-1,-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tpcmom)-(long)(p)),102,0,0,-1,-1,-1,1,"tpcmom=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->p)-(long)(p)),102,0,0,-1,-1,-1,1,"p=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,-1,-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ncls)-(long)(p)),105,0,0,-1,-1,-1,1,"ncls=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nclsS)-(long)(p)),105,0,0,-1,-1,-1,1,"nclsS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nclsF)-(long)(p)),105,0,0,-1,-1,-1,1,"nclsF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ncross)-(long)(p)),105,0,0,-1,-1,-1,1,"ncross=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2pc)-(long)(p)),102,0,0,-1,-1,-1,1,"chi2pc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dcaxy)-(long)(p)),102,0,0,-1,-1,-1,1,"dcaxy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dcaz)-(long)(p)),102,0,0,-1,-1,-1,1,"dcaz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dedx)-(long)(p)),102,0,0,-1,-1,-1,1,"dedx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ttof)-(long)(p)),102,0,0,-1,-1,-1,1,"ttof=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->length)-(long)(p)),102,0,0,-1,-1,-1,1,"length=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nspiTPC)-(long)(p)),102,0,0,-1,-1,-1,1,"nspiTPC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nskTPC)-(long)(p)),102,0,0,-1,-1,-1,1,"nskTPC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nspTPC)-(long)(p)),102,0,0,-1,-1,-1,1,"nspTPC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nseTPC)-(long)(p)),102,0,0,-1,-1,-1,1,"nseTPC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nspiTOF)-(long)(p)),102,0,0,-1,-1,-1,1,"nspiTOF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nskTOF)-(long)(p)),102,0,0,-1,-1,-1,1,"nskTOF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nspTOF)-(long)(p)),102,0,0,-1,-1,-1,1,"nspTOF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nseTOF)-(long)(p)),102,0,0,-1,-1,-1,1,"nseTOF=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaskDataDictionaryLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTaskDataDictionary() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncEvent(void) {
   /* Event */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaskDataDictionaryLN_Event));
   G__memfunc_setup("Event",514,G__TaskDataDictionary_169_0_1, 105, G__get_linked_tagnum(&G__TaskDataDictionaryLN_Event), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaskDataDictionary_169_0_2, 85, G__get_linked_tagnum(&G__TaskDataDictionaryLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Event::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaskDataDictionary_169_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Event::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaskDataDictionary_169_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Event::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaskDataDictionary_169_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Event::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TaskDataDictionaryLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaskDataDictionary_169_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaskDataDictionary_169_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Event::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaskDataDictionary_169_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Event::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaskDataDictionary_169_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Event::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaskDataDictionary_169_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Event::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Event", 514, G__TaskDataDictionary_169_0_14, (int) ('i'), G__get_linked_tagnum(&G__TaskDataDictionaryLN_Event), -1, 0, 1, 1, 1, 0, "u 'Event' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Event", 640, G__TaskDataDictionary_169_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TaskDataDictionary_169_0_16, (int) ('u'), G__get_linked_tagnum(&G__TaskDataDictionaryLN_Event), -1, 1, 1, 1, 1, 0, "u 'Event' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTrack(void) {
   /* Track */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaskDataDictionaryLN_Track));
   G__memfunc_setup("Track",501,G__TaskDataDictionary_170_0_1, 105, G__get_linked_tagnum(&G__TaskDataDictionaryLN_Track), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaskDataDictionary_170_0_2, 85, G__get_linked_tagnum(&G__TaskDataDictionaryLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Track::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaskDataDictionary_170_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Track::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaskDataDictionary_170_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Track::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaskDataDictionary_170_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Track::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TaskDataDictionaryLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaskDataDictionary_170_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaskDataDictionary_170_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Track::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaskDataDictionary_170_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Track::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaskDataDictionary_170_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Track::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaskDataDictionary_170_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Track::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Track", 501, G__TaskDataDictionary_170_0_14, (int) ('i'), G__get_linked_tagnum(&G__TaskDataDictionaryLN_Track), -1, 0, 1, 1, 1, 0, "u 'Track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Track", 627, G__TaskDataDictionary_170_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TaskDataDictionary_170_0_16, (int) ('u'), G__get_linked_tagnum(&G__TaskDataDictionaryLN_Track), -1, 1, 1, 1, 1, 0, "u 'Track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTaskDataDictionary() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTaskDataDictionary() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTaskDataDictionary() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TaskDataDictionaryLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TaskDataDictionaryLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TaskDataDictionaryLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TaskDataDictionaryLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TaskDataDictionaryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TaskDataDictionaryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaskDataDictionaryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__TaskDataDictionaryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaskDataDictionaryLN_Event = { "Event" , 99 , -1 };
G__linked_taginfo G__TaskDataDictionaryLN_Track = { "Track" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTaskDataDictionary() {
  G__TaskDataDictionaryLN_TClass.tagnum = -1 ;
  G__TaskDataDictionaryLN_TBuffer.tagnum = -1 ;
  G__TaskDataDictionaryLN_TMemberInspector.tagnum = -1 ;
  G__TaskDataDictionaryLN_TObject.tagnum = -1 ;
  G__TaskDataDictionaryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TaskDataDictionaryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaskDataDictionaryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__TaskDataDictionaryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaskDataDictionaryLN_Event.tagnum = -1 ;
  G__TaskDataDictionaryLN_Track.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTaskDataDictionary() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TaskDataDictionaryLN_TClass);
   G__get_linked_tagnum_fwd(&G__TaskDataDictionaryLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TaskDataDictionaryLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TaskDataDictionaryLN_TObject);
   G__get_linked_tagnum_fwd(&G__TaskDataDictionaryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TaskDataDictionaryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TaskDataDictionaryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaskDataDictionaryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TaskDataDictionaryLN_Event),sizeof(Event),-1,292096,"Help class",G__setup_memvarEvent,G__setup_memfuncEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TaskDataDictionaryLN_Track),sizeof(Track),-1,292096,"Help class",G__setup_memvarTrack,G__setup_memfuncTrack);
}
extern "C" void G__cpp_setupTaskDataDictionary(void) {
  G__check_setup_version(30051515,"G__cpp_setupTaskDataDictionary()");
  G__set_cpp_environmentTaskDataDictionary();
  G__cpp_setup_tagtableTaskDataDictionary();

  G__cpp_setup_inheritanceTaskDataDictionary();

  G__cpp_setup_typetableTaskDataDictionary();

  G__cpp_setup_memvarTaskDataDictionary();

  G__cpp_setup_memfuncTaskDataDictionary();
  G__cpp_setup_globalTaskDataDictionary();
  G__cpp_setup_funcTaskDataDictionary();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTaskDataDictionary();
  return;
}
class G__cpp_setup_initTaskDataDictionary {
  public:
    G__cpp_setup_initTaskDataDictionary() { G__add_setup_func("TaskDataDictionary",(G__incsetup)(&G__cpp_setupTaskDataDictionary)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTaskDataDictionary() { G__remove_setup_func("TaskDataDictionary"); }
};
G__cpp_setup_initTaskDataDictionary G__cpp_setup_initializerTaskDataDictionary;

